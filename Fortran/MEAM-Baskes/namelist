$:
$Date: 2002/01/04 23:31:59 $
$Log: namelist,v $
Revision 1.2  2002/01/04 23:31:59  baskes
added shear, sheardot, mode  8

Revision 1.1  2001/09/17 16:41:15  baskes
Initial revision

Revision 1.2  2000/09/21 15:30:27  baskes
*** empty log message ***

c*******************************************************************
c                 namelist definitions
c
c  prntcard
c      ipinter(=0)    =1, print out f(rho), z(r), and rho(r)
c                     =0, no print
c      ipatoms(=3)    =+-3, print out atom positions beginning and end
c                     =+-2, print out at end only
c                     =+-1 at beginning only
c                     =0, none
c                     negative values give less information
c                     positive values give more information
c      ipitera(=-1)   abs(ipitera) is base for iteration output in routine
c                              output
c                     also used by minimizer: (ipitera.lt.0) prints out less
c      ipscree(=0)    =0, no print
c		      =atom number, print out screening information
c		      >natoms, print out for all atoms			
c      iconst(=0)     =0 do not list the constaints on individual atoms
c                     =1 list individual atomic constraints (see fixcard)
c      sortp(=.false.)    =.true.  sort the order in which the atoms are printed
c                     =.false.  print atoms in the order of their number
c	nminp,nmaxp(1,10000)
c      xminp,xmaxp(+-e6)
c      yminp,ymaxp(+-e6)         print atoms only within these bounds
c      zminp,zmaxp(+-e6)
c
c      typep(=0)      print atoms only of the specified type
c      printf(='dynprint')   name of the file to receive the program printout
c      rstrtf(=none)   name of the file to receive restart information
c                      if not specified or 'none', no restart file will be
c                      produced
c      conff(=none)    name of the file to receive the intermediate
c                      configurations
c                      if not specified or 'none', no configuration file be
c                      produced
c      iconf(=1)       what to put in configuration file
c                      =1, positions and types
c                      =2, positions, velocities and types
c                      =3, positions, types and local stress tensor
c                      =-3, positions, types and full local stress tensor
c                      =4, positions, velocities, types and energy
c                      =5, positions, types, rhobar,rho0,rhol^2
c                      =6, positions, velocities, types, local stress tensor
c                      =-6, positions, velocities, types, full local stress tensor
c  headcard
c      header(=blank)  string up to 80 characters describing the run
c
c  FOR EAM ONLY
c  funccard (define files containing the interaction functions)
c      funcfl(i)(=none)
c                 the name of the file containing the interactions
c                 for particle type i.  name has a maximum length
c                 of 80 characters.
c      setfl(i)(=none)
c                 the name of the file containing a function set
c                 (the cross interaction need not be the geometric mean)
c
c  FOR MEAM ONLY
c  meacard (define files containing the interaction functions)
c
c      meafile(='none')
c                 name of file that contains meacard namelist data
c                 ='none' data comes from input file
c      ntypes(=1) number of atom types
c      enames     list of element names (ntypes of them)
c      kodes(='library')  list of locations of data for each element
c                 ='library' read data from library file
c                 otherwise data read from input file
c      meamf=('meamf')
c                 name of library file
c      nn(='.false.')	='.false.' first neighbor MEAM
c			='.true.'  second neighbor MEAM (sets itable=1)
c     itable(=0)	=0, phi calculated directly
c			=1, phi put into table
c  data for element that is necessary if library file not used
c      lattces, esubs, alats, alphas, asubs, betas, ts, deltas, zs, rozros
c  data for alloys
c                 default values for res, alphas, esubs are calculated
c      all        reference phase structure
c      res        nearest neighbor distance in reference structure (Angstroms)
c  or  rz0(=1)    scaling for res based on default
c      alphas     alpha value for reference phase
c  or  alpha0(=1) scaling for alpha based on default
c      esubs      formation energy of reference phase (eV)
c  or  deltas(=0) deviation of formation energy of reference phase (eV)
c      rcut       cutoff distance (Angstroms)
c      frcut(=0.9)start of cutoff at rcut*sqrt(frcut)
c      cmin(=2.)  angular screening factor
c      cmax(=2.8) angular screening factor
c      noscr(=0)  =0 angular screening
c                 =1 no angular screening
c      legend(=0) determines form of electron density 3rd term
c                 =0.6 Legendre polynomial
c                 =0 cos^3
c      repuls(=0) short range repulsion in UES
c      attrac(=0) short range attraction in UES
c      ialloy(=0) =0  t_bar=sum(t rho_0)/sum(rho_0)
c                 =1  t_bar=sum(t rho_0)/sum(t^2 rho_0)
c
c  initcard (determines how the run is initialized)
c      initf(='none')
c                 name of a file containing initial particle positions and
c                 velocities.  this is the default starting configuraion
c                 if specified.  if not given or 'none', the default is to
c                 generate positions and velocities
c      genvel(=.false.)
c                 .true. implies that the velocities are to be
c                    generated in accord with the temperature specified
c                    in velcard.  (the generated velocities will
c                    replace restart values.)
c      genlat(=.false.)
c                 .true. implies that the particle positions are
c                    to be generated (will supersede restart values.)
c      gendis(=.false.)
c                 .true. generates small random displacements
c                    use to help break symmetry to knock minimizer
c                    off of unstable extremum
c      dismag(=0.1)
c                 magnitude of the random displacements (if gendis=.true.)
c      sort(=.false.)    .true. sort the particle list by position
c
c      scale(=1.)
c                 scales the initial lattice by the values in the array
c                 scale.  If only scale(1) is set, this will apply to
c                 all directions
c      shear(=0)  
c	  	  shears the lattice in xz
c      sheardot(=0)
c		  constant shear rate (1/ps) in x direction due to z position
c		  this is a boundary condition only
c      default:   no restart and generation of velocities and positions
c                 rstart uses previously saved positions and velocities unless
c                 genvel and/or genlat specifically set to .true.
c                 sort if generated own lattice, no sort if restarted
c
c  latcard (determines the lattice if genlat=.true.)
c      lattype    lattice type: if not defined, use lattype of first atom type
c                               if defined but not recognized, use fcc
c      avec,bvec,cvec   primitive lattice vectors
c                       if vec's defined, overrides lattype
c      alat(=3.52)      lattice constant
c      xrot,yrot,zrot   rotated axes (default, no rotation)
c      perub(3)   upper bounds of the periodic cell (default is  1000.)
c      perlb(3)   lower bounds of the periodic cell (default is -1000.)
c      xbound(2)  lower and upper bounds on x of region to contain particles
c                 default is to fill periodic bounds
c      ybound(2)  lower and upper bounds on y of region to contain particles
c                 default is to fill periodic bounds
c      zbound(2)  lower and upper bounds on z of region to contain particles
c                 default is to fill periodic bounds
c      aperub     like perub, perlb except in units of alat
c      aperlb
c      axbnd(2)   like xbound except in units of alat
c      aybnd(2)
c      azbnd(2)
c
c  velcard (determines the velocities used, if genvel=.true.)
c     temp       temperature of the boltzman distribution of particles
c     iseed      seed for random number generator (8-digit integer)
c     icm(.false.)       =.t. set CM velocity each timestep
c
c  bndcard (determines the type of boundary conditions used)
c      ibdtyp(=1)
c                 =1, fixed periodic bounds (non-periodic: set large periods)
c                 =2, dynamic periodic lengths in x, y and z directions
c      dpress(=0.0)
c                 desired pressure in bar (ibdtyp=2)
c      bndmas(3 values)(=100.)
c                 mass of the periodic lengths
c      bnddrg(3 values)(=sqrt(7.5*perlen/bndmas))
c                 viscous drag coefficient for the periodic lengths
c      idynper(3 values)(=1)
c                 determines which periodic lengths are allowed to change
c                 only applies to ibdtyp=2
c		  0 fixed periodic length
c		  1 change periodic length to give dpress or dstress
c		  2 change periodic length at rate bndvel 
c		      - at end of restart file (A/ps)
c	          any values =-1 are forced to maintain symmetry
c      dstress(3 values)(=0.)
c                 externally applied diagonal stress (units of bar)
c
c  neicard (neighbor method information)
c      nmeth(=2)  neighbor finding method
c                 =1, original neighbor procedure (best for small natoms)
c                 =2, save list of neighbor indexes (best for large natoms)
c                 =-2, linked list (use for natoms> 2000)
c                 =3, has problems, don't use it
c      dradn(=0.1*(radius of interaction))
c                 width of the buffer region for the neighbor list (nmeth=2)
c
c  defcard (defects)
c      pos        new position of the defect atom
c      delpos     change in the position of the defect atom
c                 (pos takes precedence over delpos)
c      vel        velocity of the defect atom
c                 (if not specified, set to 0)
c      newtype    new type of the defect atom
c                 specify type=0 to delete an atom
c                 defaults to type 1 if not specified
c      type       equivalent to newtype (for upward compatibility)
c      oldtype    only atoms of initial type oldtype will be affected
c      num(1 or 2 values)
c                 number of the defect atom or a range of atoms to be affected
c                 (use 0 to add an atom)
c      xmin,xmax  region in which atoms are to be changed
c      ymin,ymax  defaults to (-/+ 9999.)
c      zmin,zmax  specification by number takes precedence over specification
c                 by region
c      (note:  provide one defcard for each defect desired as well
c       a blank defcard to end the defect list)
c
c  fixcard (fix atom positions or add extra forces)
c      mode      =0 no constraints (default for all atoms)
c                =1 constrain to a plane (remove 1 degree of freedom)
c                =2 constrain to a line (remove 2 degrees of freedom)
c                =3 constrain to a point (remove 3 degrees of freedom)
c                =4 add a force and/or force rate
c                =5 add a fixed displacement rate
c                =6 add a fixed strain rate
c		 =7 add a circumferential strain rate
c		 =8 add a  strain rate as below
c		 =9 add a  radial force for cylinder
c		 =10 add a  radial force
c      vector    specifies the direction for modes 1 and 2
c                is the applied force(eV/A) for mode 4
c                is the displacement rate(A/ps)  for mode 5
c		 	v_x=vector_x
c		 	v_y=vector_y
c		 	v_z=vector_z
c                is the strain rate(1/ps)  for mode 6
c		 	v_x=x*vector_x
c		 	v_y=y*vector_y
c		 	v_z=z*vector_z
c     		 is the strain rate (1/ps) for mode 7
c		 	v_x=y*vector_x
c		 	v_y=x*vector_y
c		 	v_z=  vector_z
c     		 is the strain rate (1/ps) for mode 8
c		 	v_x=y*vector_x
c		 	v_z=x*vector_z
c		 	v_y=  vector_y
c     		 is the applied force (eV/A) for mode 9
c		 	f_x=x/r*vector_x
c		 	f_y=y/r*vector_y
c		 	f_z=  vector_z
c     		 is the applied force (eV/A) for mode 10
c		 	f_x=x/r*vector_x
c		 	f_y=y/r*vector_y
c		 	f_z=z/r*vector_z
c      dvecdt    the time derivative of the applied force vector (mode 4,9,10)
c                or =0 if the vector is applied and =1 otherwise 
c		 (mode 5,6,7,8)
c      num       atom number(s) to apply the constraints to
c                (either a single number or a range, i.e. 1,5)
c      xmin,xmax limits of constrained atoms if not determined by atom number
c      ymin,ymax (default is -9999,9999)
c      zmin,zmax
c      type      type of atoms in region to be constrained (default all types)
c      type,pos,vel,num  type, position, velocity, and number on list
c      (note:  provide one fixcard for each constraint desired as well
c       a blank fixcard to end to the constraint list)
c
c  tmpcard (determines temperature control)
c
c      ifxtmp(=0)
c                 =0, temperature not controlled (constant energy)
c                 =1, temperature fixed by standard drag
c                 =2, Hoover drag
c                 =3, Langevin control
c		  =4, Hugoniostat
c      follow(=.false.)
c                 =.true., follow the atoms, even if they later move out of
c                     region (see regcard)
c                 =.false., apply controls only to atoms in the defined regions
c                     at each time step (see regcard)
c
c  regcard (defines regions for temperature control)
c      destmp     desired temperature when using temperature control
c      itemp(=1,1,1)
c                 determines degree of freedom (x,y,z) for temperature control
c                 =0, degree of freedom not controlled
c                 =1, degree of freedom controlled
c      q          temperature control equilibration constant
c		 or for ifxtmp=4, Hugoniot control
c                   value depends on type of temperature control
c                   defaults = (1730,40,0.1,1.) for ifxtmp=(1,2,3,4), respectively
c      tmptim     approximate equilibration time (in lieu of q for ifxtmp<4)
c      vcm(=0,0,0)  center of mass velocity of region; must set icm=.t.
c      for ifxtmp=4
c      e0	initial internal energy per atom
c      v0	initial volume per atom
c      pzz	initial pressure (eV/angstrom^3)
c
c  avecard
c      eqtim     equilibration time before computing averages
c      ncalcacf(=1) 1 - no acf calculated
c                   0 - acf calculated
c      nbuff        is the number of buffers with acfs being calculated controls
c			also time spacing by
c                       nval/nbuff=timesteps for decay in acf
c      nval	    is the total length of the acf desired (in timesteps)
c      nlimitacf    is the number of acfs required for good statistics between
c			 500 and 1000 is good
c	A file is generated named AcfData.txt and it will have the normalized
c	vacf (Diffusion Coefficient cm^2/s) for each element in the system,
c	stress-acf (Viscosity mPa-s), energy-acf (Thermal conductivity W/m/K).
c	Printed at the end of the acfs starting with "acf integrals".
c
c  intcard (integration parameters)
c      inte(=1)     integrator choice
c                   2 - energy only
c                   1 - nordsieck integrator
c                   0 - slatec (deabm) integrator (not available)
c                  -1 - minimize the energy (va08a)
c      dt(=0.001)
c                   time steps used by nordsieck (picoseconds, inte=1)
c      tottim(=0.1)
c                   total time to be integrated (picoseconds, inte=1)
c      outtim(=0.05)
c                   time interval for intermediate output (picoseconds, inte=1)
c      iaccur(=0)   accuracy of intermediate energy and pressure output
c                   1 - accuracy assured (extra call to force at each outtim)
c                   0 - lower accuracy
c      tol(=1.e-3)  error tolerance used by deabm (inte=0)
c                   or the negative of that used by va08a
c      nfmax(=1000)
c                   maximum number of iterations (inte=0)
c      stmax(=0.05*alat)  largest stepsize allowed during minimization
c      accbnd(=1000.,400.)
c                   bounds on maximum acceleration allowed for automatic
c                   change in dt
c                   first number determines when dt will be decreased
c                   second number allows for dt to be increased back
c
c  continue (** optional **)
c      contin     =.true. perform a continuation run (default)
c                 =.false. stop execution
c      lastconf   =.true. start the continuation run with the last
c                      configuration of the previous run (default)
c
c      inclusion of the continue namelist card provides for a continuation
c      of the job with different boundary conditions, defects and/or
c      constraints.  (constraints accumulate for each continuation) this
c      card must be followed by a bndcard, one or more defcards, and
c      one or more fixcards.  The restart and configuration files
c      (if any) will be rewound and overwritten but the print file
c      will contain a record of all jobs run.
c
c*****************************************************************************
